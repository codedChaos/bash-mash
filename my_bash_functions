# bapt() is a function that will run an `apt install` command in the background to free up your terminal
function bapt() {
    SCRIPT_ID=$$
    SHELL_ID=$BASHPID
    MSG_PREFIX="$SHELL_ID -- $SCRIPT_ID : "
    declare -a help_msg=()
    # dump passed args to array variable
    if [[ $# -gt 1 ]]; then
        logger -s "$MSG_PREFIX More than 1 argument was passed correctly. Script continuing."
        args=("$@") # capturing passed arguments for future usage
    else
        help_msg+=("$MSG_PREFIX")
        help_msg+=("Not enough args passed to function. Need 2 or more arguments.")
        help_msg+=("USAGE: bapt <install> <appname>")
        help_msg+=("The first arg passed above is the word 'install' which is the same as saying")
        help_msg+=("sudo apt install")
        help_msg+=("the second arguments and onward are the app names and/or options")
        help_msg+=("")
        echo "$MSG_PREFIX ${help_msg[@]}"
        return 1
    fi

    # test command argument. ONLY WORKING WITH "INSTALL" cmd for NOW
    case "$1" in
    install)
        logger -s "$MSG_PREFIX" "Running install on ${args[@]:1}"
        ;;
    *)
        logger "$MSG_PREFIX That command is unsupported with bapt() at this time."
        logger "$MSG_PREFIX HELP MESSAGE: $help_msg[@]"
        return 1
        ;;
    esac

    sudo bash -c "apt $* -y >/dev/null 2>&1 & disown"
    apt_procID=$!

    logger "$MSG_PREFIX apt Proces ID: $apt_procID"

    if [ -z $apt_procID ]; then
        return $apt_procID
    else
        return 1
    fi
}

# Separate way to fail out of a function without exiting the shell
function fail() {
    : "${__fail_fast:?$1}"
}

# may not use this and instead use Logger
function echoerr() {
    printf "%s\n" "$*" >&2
}

# Function to mkdir and change to it
function mcd() {
    mkdir -p $1
    cd $1
}

# Extract function that utilizes lots of different archive tools to extract almost any type of archive
function extract() {
    if [ -z "$1" ]; then
        # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        return 1
    else
        for n in $@; do
            if [ -f "$n" ]; then
                case "${n%,}" in
                *.tar.bz2 | *.tar.gz | *.tar.xz | *.tbz2 | *.tgz | *.txz | *.tar)
                    tar xvf "$n"
                    ;;
                *.lzma) unlzma ./"$n" ;;
                *.bz2) bunzip2 ./"$n" ;;
                *.rar) unrar x -ad ./"$n" ;;
                *.gz) gunzip ./"$n" ;;
                *.zip) unzip ./"$n" ;;
                *.z) uncompress ./"$n" ;;
                *.7z | *.arj | *.cab | *.chm | *.deb | *.dmg | *.iso | *.lzh | *.msi | *.rpm | *.udf | *.wim | *.xar)
                    7z x ./"$n"
                    ;;
                *.xz) unxz ./"$n" ;;
                *.exe) cabextract ./"$n" ;;
                *)
                    echo "extract: '$n' - unknown archive method"
                    return 1
                    ;;
                esac
            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}

# history Averager to find useful commands to turn into functions
function histavg() {
    results="$(history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n10)"
    echo "$results"
}
